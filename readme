Modellizzare la struttura di un database per memorizzare tutti i dati riguardanti una università:

sono presenti diversi `Dipartimenti` (es.: Lettere e Filosofia, Matematica, Ingegneria ecc.);

- ogni `Dipartimento` offre più `Corsi di Laurea` (es.: Civiltà e Letterature Classiche, Informatica, Ingegneria Elettronica ecc..)
  (ONE TO MANY)
- ogni `Corso di Laurea` prevede diversi `Corsi` (es.: Letteratura Latina, Sistemi Operativi 1, Analisi Matematica 2 ecc.);
  (ONE TO MANY)
- ogni `Corso` può essere tenuto da diversi `Insegnanti`;
  ogni `Corso` prevede più appelli d'`Esame`;
(MANY TO MANY)

ogni `Studente` è iscritto ad un solo `Corso di Laurea`;
ogni `Studente` può iscriversi a più appelli di `Esame`;
per ogni appello d'`Esame` a cui lo`Studente` ha partecipato, è necessario memorizzare il voto ottenuto, anche se non sufficiente.

## entità

- Dipartimenti
- Corsi di Laurea
- Corsi
- Insegnanti
- Esame
- Studente

## Dipartimenti
- (PK) ID : INT
- Nome: varchar(50)
- Indirizzo

## Corsi di Laurea
- (PK) ID : INT
- (FK) dipartimenti_id : INT
- Nome: varchar(50)

## Corsi
- (PK)ID : INT
- (FK)ID_Corso di Laurea : INT
- Nome: varchar(50)


## Insegnanti
- Nome: varchar(50)
- Cognome: varchar(50)
- (FK) corso_id


## Corsi_Insegnanti (pivot)
- (PK) id
- (FK) corso_id
- (FK) insegnante_id

## Esame
-(PK) id
Nome: varchar(50)
(FK): corso_id


## Studente
- Nome: varchar(40)
- Cognome: varchar(30)
- (FK) Corso di Laurea_id

## Esame_Studente (pivot)
- (PK) id
- voto 
- (FK) studente_id
- (FK) esame_id


